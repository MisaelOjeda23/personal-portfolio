---
import Container from "./Container.astro";

const links = [
  {
    to: "/#projects",
    label: "Proyectos",
  },
  {
    to: "/#about",
    label: "Sobre mi",
  },
  {
    to: "/#social-media",
    label: "Redes sociales",
  },
];
---

<script>
  const themeButton = document.querySelector("#themeButton");

  const toggleTheme = () => {
    const html = document.documentElement;
    const currentTheme = html.classList.contains("dark") ? "dark" : "light";

    const newTheme = currentTheme === "dark" ? "light" : "dark";
    html.classList.remove(currentTheme);
    html.classList.add(newTheme);

    localStorage.setItem("theme", newTheme);

    const savedTheme = localStorage.getItem("theme");

    if (savedTheme) {
      document.documentElement.classList.add(savedTheme);
    } else {
      const prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      document.documentElement.classList.add(prefersDark ? "dark" : "light");
    }
  };

  themeButton?.addEventListener("click", toggleTheme);

  let isToggled = false;
    const navlinks = document.querySelector("#navlinks");
    const hamburger = document.querySelector("#hamburger");
    const layer = document.querySelector("#navLayer");
    const links = navlinks?.querySelector("ul")?.children
    ? Array.from(navlinks.querySelector("ul")!.children)
    : [];

    function toggleNavlinks() {
        if (isToggled) {
            navlinks?.classList.add("!visible", "!scale-100", "!opacity-100", "!lg:translate-y-0");
            hamburger?.classList.add("toggled");
            layer?.classList.add("origin-top", "scale-y-100");
        } else {
            navlinks?.classList.remove("!visible", "!scale-100", "!opacity-100", "!lg:translate-y-0");
            hamburger?.classList.remove("toggled");
            layer?.classList.remove("origin-top", "scale-y-100");
        }
    }
    hamburger?.addEventListener("click", () => {
        isToggled = !isToggled;
        toggleNavlinks();
    });

    links.forEach((link) => {
        link.addEventListener("click", () => {
            isToggled = !isToggled;
            toggleNavlinks();
        });
    });
</script>

<header>
  <div class="relative m-5">
    <Container>
      <div class="flex justify-between items-center">
        <div class="relative z-20 flex w-full justify-between md:px-0 lg:w-max">
          <span
            class="text-2xl bg-gradient-to-r font-bold from-primary to-violet-800 bg-clip-text text-transparent"
          >
            MishaDev
          </span>
          <div class="relative flex max-h-10 items-center lg:hidden">
            <button
              aria-label="humburger"
              id="hamburger"
              class="relative -mr-6 p-6"
            >
              <div
                aria-hidden="true"
                id="line"
                class="m-auto h-0.5 w-5 rounded bg-sky-900 transition duration-300 dark:bg-gray-300"
              >
              </div>
              <div
                aria-hidden="true"
                id="line2"
                class="m-auto mt-2 h-0.5 w-5 rounded bg-sky-900 transition duration-300 dark:bg-gray-300"
              >
              </div>
            </button>
          </div>
        </div>
        <div
          id="navLayer"
          aria-hidden="true"
          class="fixed inset-0 z-10 h-screen w-screen origin-bottom scale-y-0 bg-white/70 backdrop-blur-2xl transition duration-500 dark:bg-gray-900/70 lg:hidden"
        >
        </div>
        <div
          id="navlinks"
          class="invisible absolute top-full left-0 z-20 w-full origin-top-right translate-y-1 scale-90 flex-col flex-wrap justify-end gap-6 rounded-3xl border border-gray-100 bg-white p-8 opacity-0 shadow-2xl shadow-gray-600/10 transition-all duration-300 dark:border-gray-700 dark:bg-gray-800/20 dark:shadow-none lg:visible lg:relative lg:flex lg:w-7/12 lg:translate-y-0 lg:scale-100 lg:flex-row lg:items-center lg:gap-0 lg:border-none lg:bg-transparent lg:p-0 lg:opacity-100 lg:shadow-none"
        >
          <ul
            class="flex flex-col items-center gap-6 tracking-wide lg:flex-row lg:gap-0 lg:text-sm"
          >
            {
              links.map((link) => (
                <li>
                  <a
                    href={link.to}
                    class="text-gray-600 hover:text-primary dark:hover:text-primary block transition dark:text-white md:px-4"
                  >
                    <span>{link.label}</span>
                  </a>
                </li>
              ))
            }
            <button id="themeButton" class="bg-primary/10 p-1 rounded-lg">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="icon icon-tabler text-primary icons-tabler-outline icon-tabler-brightness-down"
                ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
                  d="M12 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0"></path><path
                  d="M12 5l0 .01"></path><path d="M17 7l0 .01"></path><path
                  d="M19 12l0 .01"></path><path d="M17 17l0 .01"></path><path
                  d="M12 19l0 .01"></path><path d="M7 17l0 .01"></path><path
                  d="M5 12l0 .01"></path><path d="M7 7l0 .01"></path></svg
              >
            </button>
          </ul>
        </div>
        
      </div>
    </Container>
  </div>
</header>

<style>
  #toggle_nav:checked ~ div #hamburger #line {
    @apply translate-y-1.5 rotate-45;
  }

  #toggle_nav:checked ~ div #hamburger #line2 {
    @apply -translate-y-1 -rotate-45;
  }

  .toggled div:first-child {
    @apply translate-y-1.5 rotate-45;
  }
  .toggled div:last-child {
    @apply -translate-y-1 -rotate-45;
  }
</style>
